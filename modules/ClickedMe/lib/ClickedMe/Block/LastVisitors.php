<?php
/**
 * ClickedMe.
 *
 * @copyright Copyrighted 2008 - 2012 Florian Schießl
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package ClickedMe
 * @author Florian Schießl <info@ifs-net.de>.
 * @link http://www.ifs-net.de
 */


/**
 * Generic item list block base class
 */
class ClickedMe_Block_LastVisitors extends Zikula_Controller_AbstractBlock
{
    /**
     * Initialise the block
     */
    public function init()
    {
        SecurityUtil::registerPermissionSchema('ClickedMe:LastVisitorsBlock:', 'Block title::');
    }

    /**
     * Get information on the block
     *
     * @return       array       The block information
     */
    public function info()
    {
        $requirementMessage = '';
        // check if the module is available at all
        if (!ModUtil::available('ClickedMe')) {
            $requirementMessage .= $this->__('Notice: This block will not be displayed until you activate the ClickedMe module.');
        }

        return array('module'           => 'ClickedMe',
                     'text_type'        => $this->__('Last visitors'),
                     'text_type_long'   => $this->__('Show a list of members that visited the own user profile.'),
                     'allow_multiple'   => true,
                     'form_content'     => false,
                     'form_refresh'     => false,
                     'show_preview'     => true,
                     'admin_tableless'  => true,
                     'requirement'      => $requirementMessage);
    }

    /**
     * Display the block
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the rendered block
     */
    public function display($blockinfo)
    {
        // only show block content if the user has the required permissions
        if (!SecurityUtil::checkPermission('ClickedMe:LastVisitorsBlock:', "$blockinfo[title]::", ACCESS_OVERVIEW)) {
            return false;
        }

        // check if the module is available at all
        if (!ModUtil::available('ClickedMe')) {
            return false;
        }

        // get current block content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['bid'] = $blockinfo['bid'];

        // set default values for all params which are not properly set
        if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
            $vars['amount'] = 5;
        }

        ModUtil::initOOModule('ClickedMe');

        $this->userId = UserUtil::getVar('uid');
        $visits = $this->entityManager->getRepository('ClickedMe_Entity_Visits')->getVisits($this->userId,$vars['amount']);
        $this->view->assign('visits', $visits);

        

        $this->view->setCaching(false);

        // assign block vars and fetched data
        $this->view->assign('vars', $vars);

        // set a block title
        if (empty($blockinfo['title'])) {
            $blockinfo['title'] = $this->__('My last visitors');
        }

        $output = '';
        $output = $this->view->fetch('clickedme_block_lastvisitors.tpl');

        $blockinfo['content'] = $output;

        // return the block to the theme
        return BlockUtil::themeBlock($blockinfo);
    }

    /**
     * Modify block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       output      the block form
     */
    public function modify($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        // set default values for all params which are not properly set
        if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
            $vars['amount'] = 5;
        }

        $this->view->setCaching(false);

        // assign the approriate values
        $this->view->assign($vars);

        // clear the block cache
        $this->view->clear_cache('clickedme_block_lastvisitors.tpl');

        // Return the output that has been generated by this function
        return $this->view->fetch('clickedme_block_lastvisitors_modify.tpl');
    }

    /**
     * Update block settings
     *
     * @param        array       $blockinfo a blockinfo structure
     * @return       $blockinfo  the modified blockinfo structure
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        $vars['amount'] = (int) $this->request->getPost()->filter('amount', 5, FILTER_VALIDATE_INT);
        
        
        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);

        // clear the block cache
        $this->view->clear_cache('clickedme_block_lastvisitors.tpl');

        return $blockinfo;
    }

}
